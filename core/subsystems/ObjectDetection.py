import json
import math
import cv2
import numpy as np
from threading import Lock
import time
import asyncio


class ObjectDetection:
    def __init__(self, components, subsystems):
        # Check required components and subsystems
        if 'Camera' not in components:
            raise AttributeError("components must have property 'Camera'")
        if 'AppdataManager' not in subsystems:
            raise AttributeError("subsystems must have property 'AppdataManager'")
            
        self.camera = components['Camera']
        self.appdata_manager = subsystems['AppdataManager']

        # Optional: WebsocketServer
        if 'WebsocketServer' in components:
            self.websocket_server = components['WebsocketServer']
        else:
            self.websocket_server = None
        
        self.detected_objects = {}  # Will store positions for all tracked objects
        self.detection_lock = Lock()
        self.time_object_detection = False  # Toggle for timing measurements
        self.write_object_positions_text = False  # Toggle for position text
        self.write_fps_text = True  # Toggle for FPS counter
        
        # Add FPS tracking variables
        self.frame_times = []
        self.max_frame_history = 30  # Number of frames to average FPS over
        self.last_frame_time = time.time()
        
        # Initialize callback list
        self.frame_callbacks = []
        
        # Load initial configuration from app_data
        self._update_from_app_data(self.appdata_manager.app_data)
        
        # Register callback for app_data updates
        self.appdata_manager.add_update_callback(self._update_from_app_data)
        
        # Set up camera callback to process frames
        self.camera.set_callback(self._process_frame)
        print('set up callback !!!!!')
        
        # Add minimum contour size constant
        self.MIN_CONTOUR_SIZE = {
            'ball': 20,
            'blueGoal': 200,
            'yellowGoal': 200
        }

        self.touching_line = False
        self.touching_line_angle = None
    
    def _update_from_app_data(self, app_data):
        """Update object configurations from app_data"""
        # print("\n[ObjectDetection] Updating from app_data...")
        
        if 'visionProfiles' not in app_data:
            # print("[ObjectDetection] No visionProfiles in app_data")
            return
            
        vision_data = app_data['visionProfiles']
        current_profile = vision_data.get('currentlySelected')
        if not current_profile:
            # print("[ObjectDetection] No profile currently selected")
            return
            
        # print(f"[ObjectDetection] Loading profile: {current_profile}")
        
        # Find the current profile
        profile = next(
            (p for p in vision_data['profiles'] if p['name'] == current_profile), 
            None
        )

        # print(profile)

        if not profile:
            # print(f"[ObjectDetection] Profile '{current_profile}' not found in profiles")
            return
            
        # Update camera settings if available
        if 'camera' in profile:
            # print("\n[ObjectDetection] Updating camera settings:")
            if 'exposure' in profile['camera']:
                exposure = profile['camera']['exposure']
                # print(f"  Setting exposure to: {exposure}")
                self.camera.picam2.controls.ExposureTime = exposure
                
            if 'saturation' in profile['camera']:
                saturation = profile['camera']['saturation']
                # print(f"  Setting saturation to: {saturation}")
                self.camera.picam2.controls.Saturation = saturation
        
        # Convert profile data to objects_config format
        objects_config = [
            {
                'name': 'ball',
                'hsv_range': [
                    [profile['ball']['min']['h'], profile['ball']['min']['s'], profile['ball']['min']['v']],
                    [profile['ball']['max']['h'], profile['ball']['max']['s'], profile['ball']['max']['v']]
                ],
                'mask_on': profile['ball'].get('mask_on', False)
            },
            {
                'name': 'yellowGoal',
                'hsv_range': [
                    [profile['yellowGoal']['min']['h'], profile['yellowGoal']['min']['s'], profile['yellowGoal']['min']['v']],
                    [profile['yellowGoal']['max']['h'], profile['yellowGoal']['max']['s'], profile['yellowGoal']['max']['v']]
                ],
                'mask_on': profile['yellowGoal'].get('mask_on', False)
            },
            {
                'name': 'blueGoal',
                'hsv_range': [
                    [profile['blueGoal']['min']['h'], profile['blueGoal']['min']['s'], profile['blueGoal']['min']['v']],
                    [profile['blueGoal']['max']['h'], profile['blueGoal']['max']['s'], profile['blueGoal']['max']['v']]
                ],
                'mask_on': profile['blueGoal'].get('mask_on', False)
            }
        ]
        
        # print("\n[ObjectDetection] Configured HSV ranges:")
        # for obj in objects_config:
            # print(f"\n{obj['name']}:")
            # print(f"  min: H={obj['hsv_range'][0][0]}, S={obj['hsv_range'][0][1]}, V={obj['hsv_range'][0][2]}")
            # print(f"  max: H={obj['hsv_range'][1][0]}, S={obj['hsv_range'][1][1]}, V={obj['hsv_range'][1][2]}")
        
        # Update object configurations
        with self.detection_lock:
            self.detected_objects = {obj['name']: None for obj in objects_config}
            self.objects_config = objects_config
            # print("\n[ObjectDetection] Updated configuration successfully")
    
    def add_frame_callback(self, callback):
        """
        Add a callback function to be called after each frame is processed.
        
        Args:
            callback: A function that takes two arguments:
                     - rgb_array: The processed RGB frame
                     - detected_objects: Dictionary of detected objects and their positions
        """
        with self.detection_lock:
            print(f"Adding callback: {callback.__name__}")  # Add debug print
            self.frame_callbacks.append(callback)

    def remove_frame_callback(self, callback):
        """
        Remove a previously registered frame callback.
        
        Args:
            callback: The callback function to remove
        """
        with self.detection_lock:
            if callback in self.frame_callbacks:
                self.frame_callbacks.remove(callback)

    def clear_frame_callbacks(self):
        """
        Remove all registered frame callbacks.
        """
        with self.detection_lock:
            print(f"Clearing {len(self.frame_callbacks)} frame callbacks")  # Add debug print
            self.frame_callbacks.clear()

    def _process_frame(self, rgb_array, hsv_array):
        """
        Camera callback function that processes each frame.
        Updates positions for all tracked objects.
        """
        # Calculate FPS
        current_time = time.time()
        self.frame_times.append(current_time - self.last_frame_time)
        self.last_frame_time = current_time
        
        # Keep frame history at max length
        if len(self.frame_times) > self.max_frame_history:
            self.frame_times.pop(0)
      
    def get_object_position(self, object_name):
        """
        Returns the current position of the specified object.
        
        Args:
            object_name: str, name of the object to get position for
            
        Returns:
            tuple: (x, y) coordinates of the object's center, or None if not detected
        """
        with self.detection_lock:
            return self.detected_objects.get(object_name)
    
    def get_all_positions(self):
        """
        Returns positions of all tracked objects.
        
        Returns:
            dict: {object_name: (x,y) or None for each object}
        """
        with self.detection_lock:
            return self.detected_objects.copy()
    
    def detect_object(self, hsv_array, hsv_range, original_array=None, object_name=None):
        """
        Detect an object in the HSV image and return its contour.
        Simply finds the largest contour in the color range that is larger than MIN_CONTOUR_SIZE.
        
        Args:
            hsv_array: numpy array of the HSV image
            hsv_range: [[lower_hsv], [upper_hsv]] bounds
            original_array: optional, original image to draw contours on
            
        Returns:
            numpy array of the largest contour, or None if no object is detected
        """
        camera_config = self.appdata_manager.robot_profile['camera']
        center = (int(camera_config['centre']['x']), int(camera_config['centre']['y']))
        

        lower_bound, upper_bound = hsv_range

        # Create a mask for the object
        object_mask = self._get_mask(hsv_array, lower_bound, upper_bound)

        # Find contours
        contours, _ = cv2.findContours(object_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # Filter out small contours
        contours = [cnt for cnt in contours if cv2.contourArea(cnt) > self.MIN_CONTOUR_SIZE[object_name]]

        
        # Draw contours if original array is provided
        if original_array is not None:
            cv2.drawContours(original_array, contours, -1, (0, 255, 0), 1)

        if not contours:
            return None
        
        sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)

        # Find the largest contour
        largest_contour = sorted_contours[0]

        # Draw the convex hull outline in magenta
        cv2.drawContours(original_array, [largest_contour], 0, (255, 0, 255), 2)

        return largest_contour
    
    @staticmethod
    def _get_mask(hsv_array, lower_bound, upper_bound):
        """Create a mask from the HSV array based on the given bounds."""
        lower_bound = tuple(lower_bound)
        upper_bound = tuple(upper_bound)

        # if the lower bound saturation is higher than the upper bound, let's swap them
        if lower_bound[1] > upper_bound[1]:
            lower_bound, upper_bound = upper_bound, lower_bound

        # if the lower bound value is higher than the upper bound, let's swap them
        if lower_bound[2] > upper_bound[2]:
            lower_bound, upper_bound = upper_bound, lower_bound

        # if the lower bound hue is higher than the upper bound, handle wraparound case for red hue
        if lower_bound[0] > upper_bound[0]:
            # Handle wraparound case for red hue
            lower_mask = cv2.inRange(hsv_array, lower_bound, (180, upper_bound[1], upper_bound[2]))
            upper_mask = cv2.inRange(hsv_array, (0, lower_bound[1], lower_bound[2]), upper_bound)
            return cv2.bitwise_or(lower_mask, upper_mask)
        else:
            return cv2.inRange(hsv_array, lower_bound, upper_bound)

    # def _handle_broadcast_error(self, task):
    #     """Handle any errors from the broadcast task"""
    #     try:
    #         task.result()
    #     except Exception as e:
    #         print(f"[ObjectDetection] Broadcast error: {str(e)}")




from scipy.interpolate import interp1d

coordinates = [(6.708, 0.0), (6.708, 2.6551609691322824), (8.062, 5.476269498838574), (8.062, 8.297378028542509), (8.062, 11.284434118818096), (8.062, 13.773647527381083), (7.28, 16.428808496513366), (5.099, 19.24991702621966), (11.662, 22.236973116495243), (8.062, 24.726186525058235), (5.099, 27.713242615333822), (6.083, 30.3684035844661), (9.22, 33.189512114170036), (8.485, 35.84467308330468), (6.083, 38.997676734151916), (9.849, 41.320942582143246), (7.071, 44.30799867241884), (11.18, 46.96315964155348), (12.649, 50.11616329239836), (13.928, 52.4394291403897), (18.385, 55.260537670095985), (15.297, 58.08164619979992), (13.601, 60.902754729503854), (14.765, 63.5579156986385), (15.232, 66.54497178891408), (16.279, 69.03418519747707), (18.028, 72.02124128775266), (18.028, 74.67640225688493), (17.117, 77.49751078659123), (17.088, 80.31861931629517), (18.248, 82.9737802854298), (18.788, 85.6289412545621), (21.378, 88.61599734483768), (21.633, 91.10521075340067), (19.105, 94.09226684367624), (19.647, 96.74742781281088), (20.0, 99.56853634251482), (20.616, 102.22369731164947), (26.173, 105.21075340192505), (22.847, 107.69996681048805), (20.396, 110.68702290076362), (23.409, 113.3421838698959), (23.022, 116.16329239959984), (25.02, 118.98440092930613), (25.632, 121.80550945901007), (26.833, 124.46067042814471), (25.179, 127.28177895784864), (24.042, 129.93693992698329), (26.019, 132.75804845668722), (26.476, 135.57915698639115), (25.71, 138.56621307666674), (26.173, 141.05542648522973), (28.284, 143.87653501493367), (25.179, 146.5316959840683), (28.071, 149.3528045137722), (30.067, 152.00796548290688), (30.414, 154.82907401261082), (28.16, 157.65018254231475), (27.0, 160.63723863259034), (32.14, 163.1264520411533), (33.015, 165.9475605708596), (30.067, 168.6027215399919), (30.017, 171.4238300696982), (33.061, 174.07899103883048), (32.28, 176.9000995685344), (33.956, 179.72120809824068), (35.44, 182.54231662794461), (33.061, 185.19747759707928), (34.0, 188.18453368735484), (33.136, 190.67374709591783), (33.541, 193.66080318619345), (37.855, 196.3159641553257), (37.014, 199.30302024560132), (34.366, 201.7922336541643), (36.056, 204.77928974443986), (38.118, 207.26850315300285), (36.878, 210.0896116827068), (39.013, 212.91072021241308), (39.623, 215.89777630268634), (38.639, 218.3869897112493), (38.118, 221.20809824095562), (40.447, 223.86325921008788), (39.623, 226.8503153003635), (42.048, 229.5054762694981), (42.0, 232.32658479920204), (40.608, 234.98174576833668), (42.579, 237.80285429804061), (42.012, 240.45801526717526), (43.046, 243.2791237968792), (43.046, 245.93428476601383), (44.911, 248.75539329571777), (43.0, 251.57650182542167), (44.045, 254.5635579156973), (45.398, 257.0527713242603), (47.17, 260.03982741453586), (44.407, 262.52904082309885), (45.891, 265.35014935280276), (45.0, 268.00531032193743), (48.26, 270.992366412213), (49.254, 273.6475273813477), (48.166, 276.4686359110516), (49.01, 279.1237968801839), (49.01, 282.11085297045946), (48.508, 284.60006637902245), (50.01, 287.58712246929804), (53.038, 290.24228343843265), (52.345, 293.0633919681366), (50.488, 295.7185529372712), (52.469, 298.5396614669752), (52.086, 301.3607699966791), (53.009, 304.1818785263854), (55.317, 306.83703949551773), (53.085, 309.4922004646523), (54.332, 312.31330899435625), (54.009, 315.1344175240626), (54.083, 317.7895784931948), (56.223, 320.6106870228988), (57.219, 323.2658479920334), (55.902, 326.08695652173736), (56.009, 328.90806505144366), (57.035, 331.72917358114756), (57.035, 334.38433455028223), (58.694, 337.2054430799862), (60.033, 339.86060404912075), (60.017, 342.847660139394), (57.079, 345.5028211085286), (60.0, 348.3239296382326), (61.131, 350.97909060736725), (61.033, 353.80019913707116), (61.008, 356.62130766677745), (61.0, 360.10620643876564), (62.032, 362.0975771656137), (62.0, 364.91868569532), (64.008, 367.5738466644523), (64.031, 370.39495519415857), (64.07, 373.38201128443416), (65.031, 375.8712246929971), (66.03, 378.5263856621294), (65.008, 381.34749419183566), (67.067, 384.1686027215396), (67.602, 387.1556588118152), (68.469, 389.6448722203782), (68.469, 392.46598075008217), (68.469, 395.1211417192167), (71.113, 398.27414537006166), (72.007, 400.59741121805536), (69.181, 403.41851974775926), (70.257, 406.0736807168916), (71.344, 409.2266843677388), (72.028, 411.7158977763018), (75.007, 415.0348489877183), (74.108, 418.0219050779939), (74.33, 421.17490872884116), (75.425, 423.1662794556915), (74.027, 425.98738798539546), (75.664, 428.4766013939585), (76.942, 431.46365748423403), (77.0, 434.4507135745097), (77.026, 437.2718221042136), (77.058, 439.7610355127766), (79.006, 442.74809160305216), (79.906, 445.23730501161515), (80.006, 448.0584135413191), (80.156, 451.04546963159464), (80.1, 453.36873547958834), (81.615, 456.3557915698639), (80.006, 458.84500497842697), (81.056, 461.5001659475592), (82.873, 464.3212744772655), (82.389, 466.9764354463978), (83.385, 469.96349153667336), (84.291, 472.45270494523635), (84.006, 475.2738134749403), (86.006, 478.0949220046466), (87.281, 480.9160305343505), (87.052, 483.5711915034852), (86.006, 486.39230003318914), (86.093, 489.04746100232137), (89.051, 492.20046465316864), (88.051, 494.52373050115995), (87.367, 497.34483903086624), (88.363, 500.1659475605702), (88.006, 502.98705609027417), (89.022, 505.6422170594087), (91.444, 508.4633255891127), (90.006, 511.1184865582473), (91.005, 513.9395950879513), (92.0, 516.7607036176553), (93.086, 519.7477597079308), (92.136, 523.0667109193496), (95.525, 525.2240292067694), (94.0, 527.7132426153323), (94.133, 530.700298705608), (95.047, 533.3554596747426), (94.0, 536.1765682044464), (97.0, 538.8317291735812), (96.338, 541.6528377032851), (96.047, 544.3079986724198), (96.255, 547.1291072021237), (98.046, 549.7842681712559), (97.329, 552.7713242615315), (98.005, 555.4264852306662), (99.182, 558.0816461998008), (98.082, 561.0687022900764), (98.02, 563.8898108197803), (99.0, 566.3790242283433), (98.046, 569.3660803186189), (101.124, 571.8552937271819), (99.081, 574.8423498174575), (99.081, 577.4975107865897), (100.005, 580.318619316296), (100.125, 582.9737802854283), (102.0, 585.7948888151346), (101.02, 588.450049784267), (99.02, 591.4371058745425), (99.182, 593.9263192831055), (101.0, 596.7474278128094), (100.02, 599.5685363425157), (102.176, 602.3896448722197), (103.044, 604.8788582807825), (104.043, 607.8659143710582), (104.005, 610.5210753401905), (104.005, 613.3421838698968), (106.075, 616.1632923996008), (106.0, 618.9844009293046), (105.005, 621.6395618984393), (106.042, 624.4606704281432), (105.119, 627.1158313972779), (107.0, 629.9369399269818), (108.116, 632.7580484566857), (107.229, 635.4132094258204), (107.117, 638.2343179555244), (108.116, 641.0554264852307), (109.659, 643.7105874543629), (111.005, 646.5316959840692), (112.04, 649.1868569532014), (112.112, 652.173913043477), (110.073, 654.66312645204), (110.073, 657.4842349817441), (110.549, 660.1393959508787), (112.219, 663.4583471622951), (114.215, 666.1135081314297), (112.641, 668.9346166611338), (112.219, 671.5897776302684), (111.018, 674.4108861599724), (113.004, 677.2319946896762), (115.017, 679.5552605376699), (114.004, 682.3763690673738), (114.739, 685.1974775970779), (114.0, 687.8526385662125), (115.004, 690.6737470959164), (114.07, 693.328908065051), (116.004, 696.3159641553266), (116.211, 698.9711251244589), (112.161, 701.9581812147345), (114.004, 704.4473946232974), (116.842, 707.2685031530037), (117.346, 709.9236641221361), (116.004, 712.7447726518424), (116.0, 715.3999336209746), (116.004, 718.2210421506785), (115.004, 721.2080982409541), (118.271, 723.8632592100888), (117.004, 726.5184201792234), (118.038, 729.3395287089273), (117.038, 731.9946896780621), (118.152, 734.9817457683351), (118.512, 737.4709591768982), (120.071, 740.4580152671738), (118.609, 743.1131762363085), (118.714, 745.9342847660123), (119.0, 748.5894457351469), (120.067, 751.4105542648509), (119.604, 754.0657152339855), (119.52, 757.0527713242611), (118.609, 759.7079322933934), (120.037, 762.5290408230996), (120.017, 765.184201792232), (119.269, 768.0053103219383), (119.017, 770.6604712910706), (121.807, 773.6475273813462), (121.037, 776.3026883504808), (119.004, 779.1237968801847), (120.004, 781.7789578493193), (121.004, 784.6000663790234), (121.004, 787.4211749087273), (122.066, 790.2422834384334), (122.016, 792.8974444075658), (121.004, 795.7185529372721), (122.066, 798.3737139064044), (122.0, 801.1948224361084), (123.102, 803.8499834052429), (123.26, 806.671091934947), (122.004, 809.4922004646533), (120.814, 812.3133089943572), (122.037, 814.9684699634918), (124.036, 817.7895784931958), (124.004, 820.444739462328), (124.016, 823.2658479920343), (125.064, 825.9210089611666), (123.037, 828.9080650514422), (124.004, 831.5632260205768), (126.396, 834.3843345502808), (126.0, 837.0394955194154), (124.101, 839.8606040491193), (124.004, 842.515765018254), (126.321, 845.3368735479579), (125.0, 847.9920345170925), (127.063, 850.9790906073681), (125.483, 853.4683040159312), (126.0, 856.2894125456351), (126.479, 859.1105210753391), (126.143, 861.9316296050429), (128.004, 864.5867905741775), (128.658, 867.5738466644532), (125.196, 870.2290076335878), (126.143, 873.0501161632917), (127.098, 875.7052771324264), (127.063, 878.5263856621302), (128.561, 881.1815466312626), (128.996, 884.0026551609689), (128.413, 886.8237636906729), (128.876, 889.4789246598075), (128.098, 892.3000331895114), (130.062, 895.287089279787), (130.035, 897.7763026883499), (130.752, 900.5974112180539), (131.034, 903.2525721871885), (130.015, 906.0736807168925), (127.004, 908.8947892465964), (127.769, 911.7158977763027), (129.004, 914.371058745435), (131.0, 917.3581148357105), (127.098, 919.8473282442735), (129.035, 922.6684367739774), (130.004, 925.3235977431121), (129.869, 928.3106538333877), (130.0, 930.9658148025223), (130.0, 933.7869233322263), (131.004, 936.4420843013609), (130.0, 939.4291403916365), (130.0, 941.9183538001972), (131.461, 944.9054098904727), (131.381, 947.5605708596073), (131.244, 950.3816793893113), (131.004, 953.0368403584459), (131.004, 955.8579488881498), (133.004, 958.5131098572846), (132.015, 961.50016594756), (131.061, 964.1553269166924), (130.188, 966.9764354463987), (130.096, 969.631596415531), (132.371, 972.6186525058066), (133.004, 975.1078659143695), (133.034, 977.9289744440758), (132.136, 980.7500829737797), (131.856, 983.5711915034838), (132.639, 986.2263524726184), (132.242, 989.0474610023222), (132.639, 991.7026219714569), (133.0, 994.5237305011608), (130.981, 997.1788914702955), (132.242, 999.9999999999994), (133.004, 1002.655160969134), (132.74, 1005.6422170594072), (133.843, 1008.297378028542), (133.015, 1011.1184865582459), (133.034, 1013.7736475273804), (133.54, 1016.5947560570845), (132.185, 1019.4158645867908), (134.134, 1022.2369731164946), (134.729, 1024.892134085627), (134.0, 1027.7132426153332), (133.735, 1030.3684035844656), (134.034, 1033.3554596747413), (135.004, 1036.0106206438757), (135.015, 1038.8317291735796), (136.0, 1041.4868901427144), (136.004, 1044.307998672418), (135.133, 1046.963159641553), (136.059, 1049.7842681712568), (137.091, 1052.4394291403917), (136.235, 1055.426485230667), (136.235, 1058.0816461997993), (136.033, 1060.9027547295057), (135.004, 1063.557915698638), (135.237, 1066.3790242283417), (136.059, 1069.0341851974765), (136.033, 1071.8552937271804), (135.0, 1074.6764022568866), (137.015, 1077.331563226019), (138.0, 1080.1526717557254), (137.713, 1082.973780285429), (138.0, 1085.6289412545639), (135.133, 1088.4500497842678), (136.444, 1091.1052107534001), (137.004, 1093.9263192831063), (137.0, 1096.7474278128102), (137.931, 1099.734483903086), (136.938, 1102.2236973116487), (136.059, 1105.0448058413529), (138.438, 1107.6999668104875), (139.004, 1110.5210753401914), (139.0, 1113.3421838698953), (139.014, 1116.1632923996017), (138.004, 1118.818453368734), (138.058, 1121.8055094590095), (139.517, 1124.2947228675723), (139.004, 1127.1158313972787), (139.032, 1129.770992366411), (137.295, 1132.7580484566865), (140.004, 1135.4132094258214), (137.441, 1138.400265516097), (139.058, 1140.8894789246597), (138.091, 1143.7105874543638), (139.23, 1146.3657484234984), (140.004, 1149.1868569532026), (140.0, 1152.0079654829062), (140.0, 1154.8290740126101), (141.004, 1157.484234981745), (138.13, 1160.3053435114487), (139.032, 1162.9605044805835), (140.357, 1165.7816130102874), (140.801, 1168.6027215399936), (140.228, 1171.257882509126), (139.09, 1174.0789910388298), (140.431, 1176.9000995685362), (139.435, 1179.5552605376683), (139.23, 1182.3763690673748), (138.362, 1185.1974775970787), (139.176, 1187.8526385662133), (142.056, 1190.6737470959172), (141.0, 1193.4948556256213), (139.291, 1196.150016594756), (141.014, 1199.1370726850314), (142.0, 1201.7922336541637), (139.09, 1204.6133421838701), (141.598, 1207.2685031530025), (141.014, 1210.0896116827087), (141.014, 1212.7447726518408), (140.129, 1215.565881181545), (142.014, 1218.2210421506793), (141.354, 1221.208098240955), (142.004, 1223.8632592100898), (142.014, 1226.6843677397935), (142.004, 1229.3395287089281), (142.0, 1232.3265847992016), (142.032, 1234.8157982077646), (142.0, 1237.6369067374708), (140.289, 1240.4580152671747), (140.357, 1243.2791237968786), (141.128, 1245.9342847660132), (142.004, 1248.755393295717), (140.289, 1251.5765018254235), (143.031, 1254.2316627945559), (142.0, 1256.8868237636902), (142.014, 1259.7079322933944), (141.004, 1262.5290408230983), (142.0, 1265.184201792233), (142.032, 1268.0053103219368), (142.506, 1270.8264188516432), (143.0, 1273.4815798207756), (143.003, 1276.3026883504792), (141.089, 1279.1237968801856), (144.014, 1281.778957849318), (143.422, 1284.4341188184526), (142.425, 1287.421174908728), (143.171, 1290.076335877863), (145.014, 1292.8974444075668), (142.088, 1295.552605376699), (141.428, 1298.3737139064053), (144.347, 1301.1948224361092), (143.283, 1304.1818785263847), (143.031, 1306.6710919349478), (145.014, 1309.4922004646517), (144.17, 1312.1473614337865), (143.224, 1314.9684699634902), (145.0, 1317.623630932625), (143.224, 1320.6106870229007), (144.003, 1323.2658479920328), (145.055, 1326.086956521739), (143.171, 1328.7421174908714), (145.496, 1331.729173581147), (145.221, 1334.2183869897099), (145.124, 1337.2054430799856), (142.425, 1339.6946564885486), (145.031, 1342.681712578824), (143.087, 1345.3368735479587), (145.003, 1348.3239296382344), (147.122, 1350.8131430467974), (145.774, 1353.6342515765011), (146.0, 1356.4553601062053), (147.054, 1359.2764686359092), (146.414, 1361.9316296050438), (147.031, 1364.7527381347477), (146.414, 1367.573846664454), (146.0, 1370.2290076335864), (147.0, 1372.8841686027208), (146.031, 1375.705277132425), (146.168, 1378.5263856621289), (145.344, 1381.5134417524043), (145.221, 1384.0026551609674), (144.42, 1386.8237636906738), (146.086, 1389.4789246598061), (145.417, 1392.4659807500816), (146.0, 1394.9551941586444), (147.0, 1397.9422502489201), (146.055, 1400.5974112180547), (147.003, 1403.4185197477586), (146.168, 1406.0736807168935), (145.496, 1408.8947892465974), (146.055, 1411.5499502157318), (148.014, 1414.5370063060075), (146.031, 1417.1921672751398), (145.582, 1420.0132758048437), (144.586, 1422.6684367739783), (145.124, 1425.4895453036822), (147.122, 1428.144706272817), (147.0, 1430.9658148025208), (146.055, 1433.6209757716556), (147.218, 1436.7739794225026), (147.054, 1439.2631928310657), (148.03, 1442.0843013607696), (147.003, 1444.739462329902), (146.414, 1447.560570859608), (148.014, 1450.3816793893122), (146.168, 1453.2027879190161), (147.003, 1455.8579488881508), (148.03, 1458.6790574178547), (145.221, 1461.5001659475586), (145.031, 1464.1553269166934), (146.219, 1466.8104878858278), (145.169, 1469.7975439761035), (147.003, 1472.4527049452358), (147.0, 1475.4397610355115), (147.031, 1477.9289744440744), (147.003, 1480.9160305343498), (147.085, 1483.4052439429129), (147.122, 1486.3923000331883), (146.003, 1488.8815134417514), (148.165, 1491.868569532027), (147.085, 1494.523730501162), (148.03, 1497.5107865914372), (149.03, 1500.0000000000002), (147.411, 1502.8211085297044), (146.086, 1505.4762694988367), (148.0, 1508.6292731496837), (148.003, 1511.2844341188184), (148.084, 1514.2714902090938), (147.003, 1516.9266511782262), (148.03, 1519.9137072685019), (147.054, 1522.402920677065), (148.003, 1525.2240292067686), (148.014, 1527.7132426153316), (149.013, 1530.534351145038), (147.031, 1533.1895121141704), (149.003, 1536.1765682044459), (149.013, 1538.8317291735805), (148.03, 1541.4868901427153), (147.275, 1544.1420511118476), (150.083, 1547.2950547626947), (149.054, 1549.7842681712577), (149.003, 1552.7713242615332), (148.003, 1555.2605376700963), (148.003, 1558.0816461998002), (149.335, 1560.736807168935), (148.084, 1563.7238632592105), (149.084, 1566.3790242283426), (149.013, 1569.3660803186183), (149.03, 1571.8552937271813), (150.03, 1574.6764022568852), (150.03, 1577.3315632260199), (150.03, 1580.3186193162956), (149.084, 1582.97378028543), (150.013, 1585.794888815134), (150.003, 1588.4500497842664), (150.03, 1591.2711583139726), (151.053, 1593.9263192831047), (150.333, 1597.0793229339522), (151.053, 1599.4025887819435), (152.013, 1602.389644872219), (151.03, 1605.0448058413538), (151.053, 1607.8659143710577), (150.003, 1610.5210753401923), (150.12, 1613.3421838698962), (149.03, 1615.9973448390308), (150.03, 1618.818453368735), (149.482, 1621.6395618984386), (149.215, 1624.460670428145), (151.03, 1627.1158313972774), (151.476, 1630.1028874875528), (148.122, 1632.5921008961159), (150.163, 1635.4132094258198), (151.119, 1638.2343179555262), (151.212, 1641.0554264852299), (151.03, 1643.7105874543647), (151.03, 1646.5316959840686), (150.163, 1649.186856953201), (150.213, 1652.0079654829071), (151.083, 1654.6631264520395), (151.083, 1657.8161301028867), (151.162, 1660.3053435114496), (151.013, 1663.1264520411537), (150.03, 1665.7816130102883), (151.013, 1668.7686691005638), (150.562, 1671.2578825091268), (148.337, 1674.2449385994025), (151.083, 1676.9000995685349), (151.212, 1679.721208098241), (151.013, 1682.3763690673732), (152.053, 1685.3634251576489), (152.03, 1687.852638566212), (147.489, 1690.6737470959158), (147.275, 1693.4948556256222), (150.03, 1696.4819117158975), (149.272, 1698.9711251244605), (151.268, 1701.7922336541646), (152.84, 1704.4473946232993), (152.003, 1707.2685031530032), (151.162, 1709.9236641221353), (151.212, 1712.910720212411), (151.212, 1715.5658811815458), (152.013, 1718.5529372718213), (151.03, 1721.0421506803843), (148.014, 1723.8632592100882), (152.161, 1726.6843677397944), (150.213, 1729.3395287089268), (151.03, 1732.1606372386307), (152.161, 1734.981745768337), (152.118, 1737.6369067374692), (151.0, 1740.4580152671756), (151.013, 1743.113176236308), (152.013, 1746.1002323265834), (152.03, 1748.755393295718), (152.0, 1751.576501825422), (150.213, 1754.2316627945568), (152.003, 1757.2187188848322), (152.003, 1759.7079322933953), (152.03, 1762.5290408230992), (152.013, 1765.350149352803), (152.03, 1768.0053103219377), (152.03, 1770.8264188516416), (150.163, 1773.8134749419173), (153.029, 1776.3026883504801), (153.013, 1779.123796880184), (152.053, 1781.7789578493189), (152.03, 1784.931961500166), (152.082, 1787.421174908729), (152.03, 1790.242283438433), (152.053, 1792.8974444075652), (153.013, 1795.7185529372714), (152.003, 1798.3737139064037), (150.053, 1801.1948224361101), (152.013, 1804.015930965814), (151.083, 1806.837039495518), (151.119, 1809.4922004646526), (151.162, 1812.3133089943567), (150.03, 1814.968469963491), (151.053, 1817.7895784931952), (152.082, 1820.6106870228991), (152.003, 1823.4317955526053), (153.052, 1826.0869565217376), (152.161, 1828.908065051444), (152.053, 1831.7291735811477), (151.003, 1834.38433455028), (152.082, 1837.2054430799865), (151.212, 1839.8606040491188), (151.053, 1842.681712578825), (151.476, 1845.502821108529), (150.403, 1848.1579820776637), (151.053, 1850.9790906073677), (151.083, 1853.634251576502), (151.083, 1856.787255227347), (151.083, 1859.1105210753385), (151.162, 1862.097577165614), (150.003, 1864.7527381347486), (151.162, 1867.7397942250243), (152.053, 1870.2290076335873), (152.161, 1873.050116163291), (152.21, 1875.7052771324259), (151.053, 1878.6923332227013), (149.405, 1881.3474941918334), (152.21, 1884.1686027215399), (150.083, 1886.8237636906722), (150.163, 1889.6448722203784), (152.329, 1892.3000331895107), (153.264, 1895.2870892797864), (150.12, 1897.942250248921), (150.12, 1900.763358778625), (153.118, 1903.4185197477595), (154.117, 1906.5715233986045), (152.053, 1909.0607368071676), (152.161, 1911.8818453368738), (151.212, 1914.537006306006), (154.117, 1917.35811483571), (153.118, 1920.0132758048446), (154.029, 1922.8343843345485), (154.081, 1925.4895453036831), (154.029, 1928.4766013939586), (153.082, 1930.9658148025217), (153.082, 1933.9528708927974), (153.082, 1936.608031861932), (152.161, 1939.4291403916359), (150.213, 1942.0843013607682), (152.266, 1944.9054098904746), (153.052, 1947.560570859607), (154.263, 1950.713574510454), (152.21, 1953.0368403584453), (154.208, 1956.023896448721), (153.264, 1958.6790574178556), (154.208, 1961.6661135081313), (154.117, 1964.155326916694), (154.029, 1967.1423830069696), (154.263, 1969.6315964155326), (154.052, 1972.6186525058083), (153.082, 1975.2738134749407), (154.029, 1978.2608695652161), (154.159, 1980.7500829737792), (154.052, 1983.571191503483), (154.324, 1986.226352472618), (152.053, 1989.379356123465), (153.16, 1991.868569532028), (152.082, 1994.689678061732), (155.158, 1997.3448390308665), (154.324, 2000.33189512114), (154.117, 2002.821108529703), (150.562, 2005.808164619978), (154.081, 2008.4633255891129), (154.081, 2011.2844341188168), (155.158, 2013.9395950879516), (156.051, 2016.7607036176553), (154.052, 2019.4158645867901), (153.082, 2022.4029206770658), (154.263, 2025.058081646198), (156.157, 2029.372718221042), (155.322, 2031.198141387321), (154.052, 2033.5214072353122), (155.003, 2036.8403584467312), (156.051, 2038.8317291735816), (156.115, 2041.6528377032855), (156.051, 2044.4739462329892), (158.079, 2047.129107202124), (154.208, 2050.1161632923995), (154.052, 2052.771324261532), (153.395, 2055.5924327912385), (155.116, 2058.2475937603704), (155.206, 2061.234649850646), (155.052, 2063.723863259209), (155.052, 2066.544971788913), (154.117, 2069.2001327580474), (154.081, 2072.1871888483233), (155.081, 2074.6764022568864), (156.08, 2077.4975107865903), (154.208, 2080.152671755725), (154.013, 2083.3056754065697), (155.158, 2085.7948888151327), (154.208, 2088.781944905408), (156.205, 2091.2711583139712), (156.32, 2094.0922668436774), (155.116, 2096.9133753733813), (154.117, 2099.734483903085), (155.206, 2102.3896448722203), (155.158, 2105.3767009624958), (157.08, 2107.8659143710584), (156.08, 2110.6870229007627), (157.051, 2113.342183869897), (153.118, 2116.3292399601723), (155.158, 2119.1503484898767), (156.461, 2122.137404580152), (156.259, 2124.4606704281437), (153.734, 2127.447726518419), (155.206, 2129.936939926982), (156.115, 2133.089943577829), (158.114, 2135.5791569863923), (157.08, 2138.5662130766677), (158.202, 2141.055426485231), (158.155, 2144.0424825755063), (156.205, 2146.531695984067), (157.318, 2149.518752074343), (156.32, 2152.007965482906), (158.079, 2154.9950215731815), (153.395, 2157.6501825423156), (156.205, 2160.6372386325916), (155.158, 2163.1264520411546), (156.461, 2168.602721539993), (158.202, 2171.5897776302686), (155.206, 2177.2319946896764), (156.08, 2179.7212080982395), (156.08, 2185.197477597078), (157.318, 2196.315964155327), (158.155, 2201.7922336541656), (158.114, 2210.421506803849)]
# Extract x and y values from coordinates
x_values = [point[0] for point in coordinates]
y_values = [point[1] for point in coordinates]

# Create interpolation function
f = interp1d(x_values, y_values, kind='linear', bounds_error=False, fill_value=(y_values[0], y_values[-1]))


def pixels_to_mm(pixels):
    # Use coordinates array to interpolate the result
    # Return interpolated value
    return float(f(pixels))


